#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ client/public/images –≤ 2.5 —Ä–∞–∑–∞
 * –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –≤ –Ω–æ–≤—É—é –ø–∞–ø–∫—É client/public/images_resized
 */

const fs = require("fs").promises;
const path = require("path");
const sharp = require("sharp");
const readline = require("readline");

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const SUPPORTED_FORMATS = [
  ".png",
  ".jpg",
  ".jpeg",
  ".gif",
  ".bmp",
  ".tiff",
  ".webp",
];

// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è
const SCALE_FACTOR = 3.2;

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function createReadlineInterface() {
  return readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
}

/**
 * –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
 */
function askQuestion(rl, question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 */
function isImageFile(filename) {
  const ext = path.extname(filename).toLowerCase();
  return SUPPORTED_FORMATS.includes(ext);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
 */
async function getFileSize(filePath) {
  try {
    const stats = await fs.stat(filePath);
    return stats.size;
  } catch {
    return 0;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
function formatFileSize(bytes) {
  if (bytes === 0) return "0 B";
  const k = 1024;
  const sizes = ["B", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}

/**
 * –£–º–µ–Ω—å—à–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
 */
async function resizeImage(inputPath, outputPath, scaleFactor = SCALE_FACTOR) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const metadata = await sharp(inputPath).metadata();
    const { width, height } = metadata;
    const originalSize = await getFileSize(inputPath);

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    const newWidth = Math.round(width / scaleFactor);
    const newHeight = Math.round(height / scaleFactor);

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await fs.mkdir(path.dirname(outputPath), { recursive: true });

    // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    await sharp(inputPath)
      .resize(newWidth, newHeight, {
        kernel: sharp.kernel.lanczos3,
        fit: "fill",
      })
      .png({
        quality: 90,
        compressionLevel: 9,
        progressive: true,
      })
      .toFile(outputPath);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    const newSize = await getFileSize(outputPath);
    const compressionRatio = (
      ((originalSize - newSize) / originalSize) *
      100
    ).toFixed(1);

    console.log(
      `‚úì ${path.basename(
        inputPath
      )}: ${width}x${height} -> ${newWidth}x${newHeight} | ${formatFileSize(
        originalSize
      )} -> ${formatFileSize(newSize)} (-${compressionRatio}%)`
    );

    return { success: true, originalSize, newSize };
  } catch (error) {
    console.error(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${inputPath}: ${error.message}`);
    return { success: false, originalSize: 0, newSize: 0 };
  }
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
async function getAllFiles(dir) {
  const files = [];

  async function traverse(currentDir) {
    const entries = await fs.readdir(currentDir, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(currentDir, entry.name);

      if (entry.isDirectory()) {
        await traverse(fullPath);
      } else if (entry.isFile() && isImageFile(entry.name)) {
        files.push(fullPath);
      }
    }
  }

  await traverse(dir);
  return files;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
async function processImages(sourceDir, targetDir, scaleFactor = SCALE_FACTOR) {
  let processedCount = 0;
  let errorCount = 0;
  let totalOriginalSize = 0;
  let totalNewSize = 0;

  console.log(`–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);
  console.log(`–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${sourceDir}`);
  console.log(`–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: ${targetDir}`);
  console.log(`–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è: ${scaleFactor}`);
  console.log("-".repeat(80));

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const imageFiles = await getAllFiles(sourceDir);

    if (imageFiles.length === 0) {
      console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
      return {
        processedCount: 0,
        errorCount: 0,
        totalOriginalSize: 0,
        totalNewSize: 0,
      };
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    for (let i = 0; i < imageFiles.length; i++) {
      const inputPath = imageFiles[i];

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress = (((i + 1) / imageFiles.length) * 100).toFixed(1);
      process.stdout.write(
        `\r[${progress}%] –û–±—Ä–∞–±–æ—Ç–∫–∞ ${i + 1}/${imageFiles.length}: `
      );

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
      const relativePath = path.relative(sourceDir, inputPath);
      const outputPath = path.join(targetDir, relativePath);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const result = await resizeImage(inputPath, outputPath, scaleFactor);

      if (result.success) {
        processedCount++;
        totalOriginalSize += result.originalSize;
        totalNewSize += result.newSize;
      } else {
        errorCount++;
      }
    }
  } catch (error) {
    console.error(`\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error.message}`);
    errorCount++;
  }

  console.log("\n" + "-".repeat(80));
  console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  console.log(`üìÅ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–æ: ${formatFileSize(totalOriginalSize)}`);
  console.log(`üìÅ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ: ${formatFileSize(totalNewSize)}`);

  if (totalOriginalSize > 0) {
    const totalSavings = (
      ((totalOriginalSize - totalNewSize) / totalOriginalSize) *
      100
    ).toFixed(1);
    const savedSpace = totalOriginalSize - totalNewSize;
    console.log(
      `üíæ –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: ${formatFileSize(savedSpace)} (${totalSavings}%)`
    );
    console.log(
      `üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏: ~${(totalOriginalSize / totalNewSize).toFixed(
        1
      )}x —Ä–∞–∑`
    );
  }

  return { processedCount, errorCount, totalOriginalSize, totalNewSize };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
async function directoryExists(dirPath) {
  try {
    const stats = await fs.stat(dirPath);
    return stats.isDirectory();
  } catch {
    return false;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
 */
async function removeDirectory(dirPath) {
  try {
    await fs.rm(dirPath, { recursive: true, force: true });
    return true;
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}: ${error.message}`
    );
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
  const sourceDir = path.join(process.cwd(), "public", "images");
  const targetDir = path.join(process.cwd(), "public", "images_resized");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
  if (!(await directoryExists(sourceDir))) {
    console.error(`–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ ${sourceDir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
    console.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.");
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ sharp
  try {
    require("sharp");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ sharp!");
    console.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: npm install sharp");
    process.exit(1);
  }

  const rl = createReadlineInterface();

  try {
    // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`–ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏: ${sourceDir}`);
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫—É: ${targetDir}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏
    if (await directoryExists(targetDir)) {
      const overwrite = await askQuestion(
        rl,
        `–ü–∞–ø–∫–∞ ${targetDir} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): `
      );
      if (!["y", "yes", "–¥–∞"].includes(overwrite.toLowerCase())) {
        console.log("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
        process.exit(0);
      } else {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É
        if (await removeDirectory(targetDir)) {
          console.log(`–ü–∞–ø–∫–∞ ${targetDir} —É–¥–∞–ª–µ–Ω–∞.`);
        }
      }
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const proceed = await askQuestion(rl, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (Y/n): ");
    if (["n", "no", "–Ω–µ—Ç"].includes(proceed.toLowerCase())) {
      console.log("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      process.exit(0);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    const { processedCount, errorCount } = await processImages(
      sourceDir,
      targetDir,
      SCALE_FACTOR
    );

    if (errorCount === 0) {
      console.log(`\nüéâ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!`);
    } else {
      console.log(`\n‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å ${errorCount} –æ—à–∏–±–∫–∞–º–∏.`);
    }
  } catch (error) {
    console.error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch((error) => {
    console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  });
}
